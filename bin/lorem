#! /usr/bin/env python3

import argparse
import json
import random
import sys
from collections import defaultdict

from os.path import expanduser

ENDINGS = '.?!'


def rebuild_db(f):
    def words(f):
        for line in f:
            for word in line.split():
                yield word

    stats = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))
    fst = snd = None
    for word in words(f):
        stats[fst][snd][word] += 1
        if word[-1] in ENDINGS:
            fst = snd = None
        else:
            fst, snd = snd, word

    states = defaultdict(dict)
    for fst, seconds in stats.items():
        for snd, thirds in seconds.items():
            words = [word for word, _ in thirds.items()]
            weights = [weight for _, weight in thirds.items()]
            states[fst][snd] = [words, weights]

    with open(expanduser('~/.lorem'), 'w+') as f:
        json.dump(states, f, indent=4)


def generate_words(states, paragraphs, sentences):
    for _ in range(paragraphs):
        print('  ', end='')
        for _ in range(sentences):
            fst = 'null'
            snd = word = random.choices(*states['null']['null'])[0]
            words = [word.capitalize()]
            while word[-1] not in ENDINGS:
                choices = states[fst][snd]
                word = random.choices(*choices)[0]
                words.append(word)
                fst, snd = snd, word
            print(' '.join(words), end=' ')
        print()
        print()


def main():
    parser = argparse.ArgumentParser(description='Random text generator.')
    parser.add_argument('--paragraphs', '-p', type=int, default=3, help='Number of paragraphs.')
    parser.add_argument('--sentences', '-s', type=int, default=10, help='Number of sentences per paragraph.')
    parser.add_argument('--rebuild', action='store_true', help='Rebuild database with text from stdin.')
    args = parser.parse_args()

    if args.rebuild:
        rebuild_db(sys.stdin)
    else:
        try:
            with open(expanduser('~/.lorem')) as f:
                db = json.load(f)
        except FileNotFoundError:
            print(f'Database not found, rerun with --rebuild.')
            sys.exit(1)
        generate_words(db, args.paragraphs, args.sentences)


if __name__ == '__main__':
    main()
