#! /usr/bin/env python3

import argparse
import json
import random
import sys
from collections import defaultdict

from os.path import expanduser

ENDINGS = '.?!'


def rebuild_db(file):
    stats = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))  # Good God!
    fst = snd = ''
    for word in (word for line in file for word in line.split()):
        stats[fst][snd][word] += 1
        fst, snd = snd, word
        if word[-1] in ENDINGS:
            fst = snd = ''

    states = defaultdict(dict)
    for fst, seconds in stats.items():
        for snd, words in seconds.items():
            states[fst][snd] = list(zip(*words.items()))

    with open(expanduser('~/.lorem'), 'w') as file:
        json.dump({'states': states}, file, indent=4)


def generate_words(db, paragraphs, sentences):
    states = db['states']
    for _ in range(paragraphs):
        print('  ', end='')
        for _ in range(sentences):
            fst = ''
            snd = word = random.choices(*states[''][''])[0]
            words = [word.capitalize()]
            while word[-1] not in ENDINGS:
                choices, weights = states[fst][snd]
                word = random.choices(choices, weights)[0]
                words.append(word)
                fst, snd = snd, word
            print(' '.join(words), end=' ')
        print()
        print()


def main():
    parser = argparse.ArgumentParser(description='Random text generator.')
    parser.add_argument('--paragraphs', '-p', type=int, default=3, help='Number of paragraphs.')
    parser.add_argument('--sentences', '-s', type=int, default=4, help='Number of sentences per paragraph.')
    parser.add_argument('--rebuild', action='store_true', help='Rebuild database with text from stdin.')
    args = parser.parse_args()

    if args.rebuild:
        rebuild_db(sys.stdin)
    else:
        try:
            with open(expanduser('~/.lorem')) as f:
                db = json.load(f)
        except FileNotFoundError:
            print(f'Database not found, rerun with --rebuild.')
            sys.exit(1)
        generate_words(db, args.paragraphs, args.sentences)


if __name__ == '__main__':
    main()
